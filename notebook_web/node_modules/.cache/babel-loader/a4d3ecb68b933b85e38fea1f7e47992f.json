{"remainingRequest":"G:\\notebook_web\\node_modules\\thread-loader\\dist\\cjs.js!G:\\notebook_web\\node_modules\\babel-loader\\lib\\index.js!G:\\notebook_web\\node_modules\\vuetify\\lib\\components\\VTreeview\\VTreeview.js","dependencies":[{"path":"G:\\notebook_web\\node_modules\\vuetify\\lib\\components\\VTreeview\\VTreeview.js","mtime":499162500000},{"path":"G:\\notebook_web\\babel.config.js","mtime":1616727095000},{"path":"G:\\notebook_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\notebook_web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\notebook_web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":"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","names":["VTreeviewNode","VTreeviewNodeProps","Themeable","provide","RegistrableProvide","arrayDiff","deepEqual","getObjectValueByPath","mixins","consoleWarn","filterTreeItems","filterTreeItem","extend","name","treeview","props","active","type","Array","default","dense","Boolean","disabled","filter","Function","hoverable","items","multipleActive","open","openAll","returnObject","search","String","value","data","level","activeCache","Set","nodes","openCache","selectedCache","computed","excludedItems","excluded","i","length","itemKey","itemText","itemChildren","watch","handler","oldKeys","Object","keys","map","k","item","newKeys","getKeys","diff","forEach","oldSelectedCache","buildTree","emitSelected","deep","handleNodeCacheWatcher","updateActive","emitActive","updateSelected","updateOpen","emitOpen","created","getValue","key","mounted","$slots","prepend","append","updateAll","methods","push","children","parent","oldNode","hasOwnProperty","isSelected","isIndeterminate","isActive","isOpen","vnode","node","c","selectionType","calculateState","add","updateVnodeState","state","counts","reduce","child","emitNodeCache","event","cache","$emit","updateFn","emitFn","v","old","getDescendants","descendants","getParents","parents","register","unregister","isParent","delete","isForced","changed","Map","descendant","itemDisabled","set","calculated","entries","hasLoaded","checkChildren","then","isExcluded","has","render","h","genChild","options","bind","staticClass","class","themeClasses"],"sourceRoot":"","sources":["../../../src/components/VTreeview/VTreeview.ts"],"sourcesContent":["// Styles\nimport './VTreeview.sass'\n\n// Types\nimport { VNode, VNodeChildrenArrayContents, PropType } from 'vue'\nimport { PropValidator } from 'vue/types/options'\nimport { TreeviewItemFunction } from 'vuetify/types'\n\n// Components\nimport VTreeviewNode, { VTreeviewNodeProps } from './VTreeviewNode'\n\n// Mixins\nimport Themeable from '../../mixins/themeable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utils\nimport {\n  arrayDiff,\n  deepEqual,\n  getObjectValueByPath,\n} from '../../util/helpers'\nimport mixins from '../../util/mixins'\nimport { consoleWarn } from '../../util/console'\nimport {\n  filterTreeItems,\n  filterTreeItem,\n} from './util/filterTreeItems'\n\ntype VTreeviewNodeInstance = InstanceType<typeof VTreeviewNode>\n\ntype NodeCache = Set<string | number>\ntype NodeArray = (string | number)[]\n\ntype NodeState = {\n  parent: number | string | null\n  children: (number | string)[]\n  vnode: VTreeviewNodeInstance | null\n  isActive: boolean\n  isSelected: boolean\n  isIndeterminate: boolean\n  isOpen: boolean\n  item: any\n}\n\nexport default mixins(\n  RegistrableProvide('treeview'),\n  Themeable\n  /* @vue/component */\n).extend({\n  name: 'v-treeview',\n\n  provide (): object {\n    return { treeview: this }\n  },\n\n  props: {\n    active: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    dense: Boolean,\n    disabled: Boolean,\n    filter: Function as PropType<TreeviewItemFunction>,\n    hoverable: Boolean,\n    items: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<any[]>,\n    multipleActive: Boolean,\n    open: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    openAll: Boolean,\n    returnObject: {\n      type: Boolean,\n      default: false, // TODO: Should be true in next major\n    },\n    search: String,\n    value: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    ...VTreeviewNodeProps,\n  },\n\n  data: () => ({\n    level: -1,\n    activeCache: new Set() as NodeCache,\n    nodes: {} as Record<string | number, NodeState>,\n    openCache: new Set() as NodeCache,\n    selectedCache: new Set() as NodeCache,\n  }),\n\n  computed: {\n    excludedItems (): Set<string | number> {\n      const excluded = new Set<string|number>()\n\n      if (!this.search) return excluded\n\n      for (let i = 0; i < this.items.length; i++) {\n        filterTreeItems(\n          this.filter || filterTreeItem,\n          this.items[i],\n          this.search,\n          this.itemKey,\n          this.itemText,\n          this.itemChildren,\n          excluded\n        )\n      }\n\n      return excluded\n    },\n  },\n\n  watch: {\n    items: {\n      handler () {\n        const oldKeys = Object.keys(this.nodes).map(k => getObjectValueByPath(this.nodes[k].item, this.itemKey))\n        const newKeys = this.getKeys(this.items)\n        const diff = arrayDiff(newKeys, oldKeys)\n\n        // We only want to do stuff if items have changed\n        if (!diff.length && newKeys.length < oldKeys.length) return\n\n        // If nodes are removed we need to clear them from this.nodes\n        diff.forEach(k => delete this.nodes[k])\n\n        const oldSelectedCache = [...this.selectedCache]\n        this.selectedCache = new Set()\n        this.activeCache = new Set()\n        this.openCache = new Set()\n        this.buildTree(this.items)\n\n        // Only emit selected if selection has changed\n        // as a result of items changing. This fixes a\n        // potential double emit when selecting a node\n        // with dynamic children\n        if (!deepEqual(oldSelectedCache, [...this.selectedCache])) this.emitSelected()\n      },\n      deep: true,\n    },\n    active (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.activeCache, this.updateActive, this.emitActive)\n    },\n    value (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.selectedCache, this.updateSelected, this.emitSelected)\n    },\n    open (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.openCache, this.updateOpen, this.emitOpen)\n    },\n  },\n\n  created () {\n    const getValue = (key: string | number) => this.returnObject ? getObjectValueByPath(key, this.itemKey) : key\n\n    this.buildTree(this.items)\n\n    for (const value of this.value.map(getValue)) {\n      this.updateSelected(value, true, true)\n    }\n\n    for (const active of this.active.map(getValue)) {\n      this.updateActive(active, true)\n    }\n  },\n\n  mounted () {\n    // Save the developer from themselves\n    if (this.$slots.prepend || this.$slots.append) {\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this)\n    }\n\n    if (this.openAll) {\n      this.updateAll(true)\n    } else {\n      this.open.forEach(key => this.updateOpen(this.returnObject ? getObjectValueByPath(key, this.itemKey) : key, true))\n      this.emitOpen()\n    }\n  },\n\n  methods: {\n    /** @public */\n    updateAll (value: boolean) {\n      Object.keys(this.nodes).forEach(key => this.updateOpen(getObjectValueByPath(this.nodes[key].item, this.itemKey), value))\n      this.emitOpen()\n    },\n    getKeys (items: any[], keys: any[] = []) {\n      for (let i = 0; i < items.length; i++) {\n        const key = getObjectValueByPath(items[i], this.itemKey)\n        keys.push(key)\n        const children = getObjectValueByPath(items[i], this.itemChildren)\n        if (children) {\n          keys.push(...this.getKeys(children))\n        }\n      }\n\n      return keys\n    },\n    buildTree (items: any[], parent: (string | number | null) = null) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const key = getObjectValueByPath(item, this.itemKey)\n        const children = getObjectValueByPath(item, this.itemChildren) ?? []\n        const oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\n          isSelected: false, isIndeterminate: false, isActive: false, isOpen: false, vnode: null,\n        } as NodeState\n\n        const node: any = {\n          vnode: oldNode.vnode,\n          parent,\n          children: children.map((c: any) => getObjectValueByPath(c, this.itemKey)),\n          item,\n        }\n\n        this.buildTree(children, key)\n\n        // This fixed bug with dynamic children resetting selected parent state\n        if (!this.nodes.hasOwnProperty(key) && parent !== null && this.nodes.hasOwnProperty(parent)) {\n          node.isSelected = this.nodes[parent].isSelected\n        } else {\n          node.isSelected = oldNode.isSelected\n          node.isIndeterminate = oldNode.isIndeterminate\n        }\n\n        node.isActive = oldNode.isActive\n        node.isOpen = oldNode.isOpen\n\n        this.nodes[key] = node\n\n        if (children.length && this.selectionType !== 'independent') {\n          const { isSelected, isIndeterminate } = this.calculateState(key, this.nodes)\n\n          node.isSelected = isSelected\n          node.isIndeterminate = isIndeterminate\n        }\n\n        // Don't forget to rebuild cache\n        if (this.nodes[key].isSelected && (this.selectionType === 'independent' || node.children.length === 0)) this.selectedCache.add(key)\n        if (this.nodes[key].isActive) this.activeCache.add(key)\n        if (this.nodes[key].isOpen) this.openCache.add(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    calculateState (node: string | number, state: Record<string | number, NodeState>) {\n      const children = state[node].children\n      const counts = children.reduce((counts: number[], child: string | number) => {\n        counts[0] += +Boolean(state[child].isSelected)\n        counts[1] += +Boolean(state[child].isIndeterminate)\n\n        return counts\n      }, [0, 0])\n\n      const isSelected = !!children.length && counts[0] === children.length\n      const isIndeterminate = !isSelected && (counts[0] > 0 || counts[1] > 0)\n\n      return {\n        isSelected,\n        isIndeterminate,\n      }\n    },\n    emitOpen () {\n      this.emitNodeCache('update:open', this.openCache)\n    },\n    emitSelected () {\n      this.emitNodeCache('input', this.selectedCache)\n    },\n    emitActive () {\n      this.emitNodeCache('update:active', this.activeCache)\n    },\n    emitNodeCache (event: string, cache: NodeCache) {\n      this.$emit(event, this.returnObject ? [...cache].map(key => this.nodes[key].item) : [...cache])\n    },\n    handleNodeCacheWatcher (value: any[], cache: NodeCache, updateFn: Function, emitFn: Function) {\n      value = this.returnObject ? value.map(v => getObjectValueByPath(v, this.itemKey)) : value\n      const old = [...cache]\n      if (deepEqual(old, value)) return\n\n      old.forEach(key => updateFn(key, false))\n      value.forEach(key => updateFn(key, true))\n\n      emitFn()\n    },\n    getDescendants (key: string | number, descendants: NodeArray = []) {\n      const children = this.nodes[key].children\n\n      descendants.push(...children)\n\n      for (let i = 0; i < children.length; i++) {\n        descendants = this.getDescendants(children[i], descendants)\n      }\n\n      return descendants\n    },\n    getParents (key: string | number) {\n      let parent = this.nodes[key].parent\n\n      const parents = []\n      while (parent !== null) {\n        parents.push(parent)\n        parent = this.nodes[parent].parent\n      }\n\n      return parents\n    },\n    register (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      this.nodes[key].vnode = node\n\n      this.updateVnodeState(key)\n    },\n    unregister (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      if (this.nodes[key]) this.nodes[key].vnode = null\n    },\n    isParent (key: string | number) {\n      return this.nodes[key].children && this.nodes[key].children.length\n    },\n    updateActive (key: string | number, isActive: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      if (!this.multipleActive) {\n        this.activeCache.forEach(active => {\n          this.nodes[active].isActive = false\n          this.updateVnodeState(active)\n          this.activeCache.delete(active)\n        })\n      }\n\n      const node = this.nodes[key]\n      if (!node) return\n\n      if (isActive) this.activeCache.add(key)\n      else this.activeCache.delete(key)\n\n      node.isActive = isActive\n\n      this.updateVnodeState(key)\n    },\n    updateSelected (key: string | number, isSelected: boolean, isForced = false) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const changed = new Map()\n\n      if (this.selectionType !== 'independent') {\n        for (const descendant of this.getDescendants(key)) {\n          if (!getObjectValueByPath(this.nodes[descendant].item, this.itemDisabled) || isForced) {\n            this.nodes[descendant].isSelected = isSelected\n            this.nodes[descendant].isIndeterminate = false\n            changed.set(descendant, isSelected)\n          }\n        }\n\n        const calculated = this.calculateState(key, this.nodes)\n        this.nodes[key].isSelected = isSelected\n        this.nodes[key].isIndeterminate = calculated.isIndeterminate\n        changed.set(key, isSelected)\n\n        for (const parent of this.getParents(key)) {\n          const calculated = this.calculateState(parent, this.nodes)\n          this.nodes[parent].isSelected = calculated.isSelected\n          this.nodes[parent].isIndeterminate = calculated.isIndeterminate\n          changed.set(parent, calculated.isSelected)\n        }\n      } else {\n        this.nodes[key].isSelected = isSelected\n        this.nodes[key].isIndeterminate = false\n        changed.set(key, isSelected)\n      }\n\n      for (const [key, value] of changed.entries()) {\n        this.updateVnodeState(key)\n\n        if (this.selectionType === 'leaf' && this.isParent(key)) continue\n\n        value === true ? this.selectedCache.add(key) : this.selectedCache.delete(key)\n      }\n    },\n    updateOpen (key: string | number, isOpen: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const node = this.nodes[key]\n      const children = getObjectValueByPath(node.item, this.itemChildren)\n\n      if (children && !children.length && node.vnode && !node.vnode.hasLoaded) {\n        node.vnode.checkChildren().then(() => this.updateOpen(key, isOpen))\n      } else if (children && children.length) {\n        node.isOpen = isOpen\n\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    updateVnodeState (key: string | number) {\n      const node = this.nodes[key]\n\n      if (node && node.vnode) {\n        node.vnode.isSelected = node.isSelected\n        node.vnode.isIndeterminate = node.isIndeterminate\n        node.vnode.isActive = node.isActive\n        node.vnode.isOpen = node.isOpen\n      }\n    },\n    isExcluded (key: string | number) {\n      return !!this.search && this.excludedItems.has(key)\n    },\n  },\n\n  render (h): VNode {\n    const children: VNodeChildrenArrayContents = this.items.length\n      ? this.items.filter(item => {\n        return !this.isExcluded(getObjectValueByPath(item, this.itemKey))\n      }).map(item => {\n        const genChild = VTreeviewNode.options.methods.genChild.bind(this)\n\n        return genChild(item, this.disabled || getObjectValueByPath(item, this.itemDisabled))\n      })\n      /* istanbul ignore next */\n      : this.$slots.default! // TODO: remove type annotation with TS 3.2\n\n    return h('div', {\n      staticClass: 'v-treeview',\n      class: {\n        'v-treeview--hoverable': this.hoverable,\n        'v-treeview--dense': this.dense,\n        ...this.themeClasses,\n      },\n    }, children)\n  },\n})\n"]}]}